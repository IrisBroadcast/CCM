@using CCM.Core.Enums
@using CCM.Web.Extensions;
@model CCM.Web.Models.SipAccount.SipAccountEditFormViewModel

@section scripts
{
    <script type="text/javascript" src="@Url.Content("~/Scripts/src/passwordgenerator.js")"></script>
    <script type="text/javascript">
        function generateNewPassword() {
            let password = generatePassword();

            setPasswordFields(password);
            setGeneratedPasswordFieldVisibility(true);
        }

        $(document).ready(function () {
            updatePasswordFieldsVisibility();
        });

        $('#changePasswordCheckBox').change(function () {
            updatePasswordFieldsVisibility()
            let checked = $(this).is(':checked');
            if (!checked) {
                setGeneratedPasswordFieldVisibility(false);
                setPasswordFields(null);
            }
        });

        function updatePasswordFieldsVisibility() {
            let checked = $('#changePasswordCheckBox').is(':checked');
            $('#passwordFieldsWrapper').toggleClass('hidden', !checked);
        }

        function setPasswordFields(password) {
            $('#Password').val(password);
            $('#PasswordConfirm').val(password);
            $('#generatedPassword').val(password);
        }

        function setGeneratedPasswordFieldVisibility(show) {
            $('#generatedPasswordWrapper').toggleClass('hidden', !show);
        }

    </script>
}

<h2>@Resources.Edit_Account</h2>
<hr />

@using (Html.BeginForm("Edit", "SipAccount", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
{
    @Html.ValidationSummary(false)

    @Html.AntiForgeryToken()

    <div class="form-group">
        @Html.LabelFor(m => m.UserName, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.UserName, new { @class = "form-control" })
        </div>
    </div>

    <div class="form-group" id="displayNameGroup">
        @Html.LabelFor(m => m.DisplayName, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.DisplayName, new { @class = "form-control" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.Comment, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.Comment, new { @class = "form-control" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.ExtensionNumber, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.ExtensionNumber, new { @class = "form-control" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.AccountLocked, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            <div class="ccm-form-group--checkbox">
                <div class="ccm-form-group-checkbox--btn">
                    @Html.CheckBoxFor(m => m.AccountLocked)
                </div>
            </div>
        </div>
    </div>

    <div class="form-group" id="ownerGroup">
        @Html.LabelFor(m => m.OwnerId, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.DropDownListFor(m => m.OwnerId, new SelectList(Model.Owners, "Id", "Name"), new { @class = "form-control" })
        </div>
    </div>

    <div class="form-group" id="codecTypeGroup">
        @Html.LabelFor(m => m.CodecTypeId, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.DropDownListFor(m => m.CodecTypeId, new SelectList(Model.CodecTypes, "Id", "Name"), new { @class = "form-control" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.ChangePassword, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            <div class="ccm-form-group--checkbox">
                <div class="ccm-form-group-checkbox--btn">
                    @Html.CheckBoxFor(m => m.ChangePassword, new { id = "changePasswordCheckBox" })
                </div>
            </div>
        </div>
    </div>

    <div id="passwordFieldsWrapper">

        <div id="generatedPasswordWrapper" class="form-group hidden">
            <label class="col-md-2 control-label">@Resources.Generated_Password</label>
            <div class="col-md-10">
                <input id="generatedPassword" class="form-control" readonly />
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.Password, new { @class = "col-md-2 control-label" })
            <div class="col-md-10">
                @Html.PasswordFor(m => m.Password, new { @class = "form-control--horizontal" })
                <button id="pwGen" type="button" onclick="generateNewPassword()" class="btn btn-info">@Resources.Generate_Password</button>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.PasswordConfirm, new { @class = "col-md-2 control-label" })
            <div class="col-md-10">
                @Html.PasswordFor(m => m.PasswordConfirm, new { @class = "form-control" })
            </div>
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            @Html.ActionLink(Resources.Cancel, "Index", "SipAccount", null, new { @class = "btn btn-default" })
            <button type="submit" class="btn btn-primary">@Resources.Save</button>
        </div>
    </div>

    @Html.HiddenFor(m => m.Id)
}