def application = [
    stackname: "contrib",
    name: "discovery",
]

def jenkinsWorkerConstraint = "!arm"
def httpProxy = env.HTTP_PROXY
def dockerRegistry = env.DOCKER_REGISTRY
def dockerFile = "ci/CCMDiscoveryApi/Dockerfile"
def dockerImageEnvName = "IMAGE_NAME"

def config = [
    dockerHost: "stoipk-stage01",
    dockerHostCredentialsId: "ipkServerUser",
    tempFilesPath: "/tmp/jenkins",
    dockerComposeFrom: "./ci/CCMDiscoveryApi/stage/docker-compose.yml",
]

node(jenkinsWorkerConstraint) {
    stage("Clone repository") {
       checkout scm
    }

    def buildVersion = "0.0.0"
    def buildEnvironment = "Dev"

    // Use tag name as build version if existing (used in the bottom footer of main page in the application)
    if(env.TAG_NAME) {
        buildVersion = env.TAG_NAME
        buildEnvironment = "Prod"
        application.stackname = "ipk"
        config.dockerHost = "stoipk01"
        config.dockerComposeFrom = "./ci/CCMDiscoveryApi/production/docker-compose.yml"
    }

    // Modify the buildinformation.json file in the repository
    sh "sed -i \"s/APP_VERSION/\"${buildVersion}\"/g\" ./CCM.DiscoveryApi/buildinformation.json"
    sh "sed -i \"s/APP_ENVIRONMENT/\"${buildEnvironment}\"/g\" ./CCM.DiscoveryApi/buildinformation.json"
    sh "sed -i \"s/APP_SERVER/\"${config.dockerHost}\"/g\" ./CCM.DiscoveryApi/buildinformation.json"

    sh '''
        BUILDINFORMATION="./CCM.DiscoveryApi/buildinformation.json"
        DATE=$(date '+%Y-%m-%d %H:%M:%S')
        sed -i "s/APP_NAME/SR Discovery/g" $BUILDINFORMATION
        sed -i "s/APP_RELEASE_DATE/${DATE}/g" $BUILDINFORMATION
    '''
    // Print the modified file
    sh 'cat ./CCM.DiscoveryApi/buildinformation.json'

    def fullImageName
    docker.withRegistry(dockerRegistry) {
        stage("Build image") {
            def buildArgs = ["HTTP_PROXY=${httpProxy}", "HTTPS_PROXY=${httpProxy}", "http_proxy=${httpProxy}", "https_proxy=${httpProxy}"]
            def argsString = ""
            buildArgs.each{
                argsString += "--build-arg ${it} "
            }

            argsString += "-f ${dockerFile} ."

            image = docker.build("${application.stackname}-${application.name}", argsString)
        }

        stage("Push image to registry") {
            image.push()
        }

        fullImageName = image.imageName()
    }

    withCredentials([usernamePassword(credentialsId: config.dockerHostCredentialsId, passwordVariable: "pass", usernameVariable: "user")]) {
        def dockerHost = [
            allowAnyHosts: true,
            user: user,
            password: pass,
            host: config.dockerHost,
            name: config.dockerHost,
        ]

        def dockerComposeDest = "${config.tempFilesPath}/${env.BUILD_TAG}".replaceAll("\\s","-")

        stage("Update service on ${dockerHost.host}") {
            sshCommand remote: dockerHost, command: "mkdir -p ${dockerComposeDest}"
            sshPut remote: dockerHost, from: config.dockerComposeFrom, into: "${dockerComposeDest}/docker-compose.yml"
            sshCommand remote: dockerHost, command: "${dockerImageEnvName}=${fullImageName} docker stack deploy -c ${dockerComposeDest}/docker-compose.yml ${application.stackname}"
        }
    }

    cleanWs notFailBuild: true
}
