def application = [
    name: "discovery",
    tag: "",
    tempFilesPath: "/tmp/jenkins",
    jenkinsWorkerConstraint: "!arm",
]

// Configuration :: Stage
def configStage = [
    stackname: "ipk-stage",
    dockerFile: "./ci/CCMDiscoveryApi/Dockerfile",
    dockerComposeFile: "./ci/CCMDiscoveryApi/stage/docker-compose.yml",
    dockerHost: "stoipk-stage01",
    dockerHostCredentialsId: "ipkServerUser",

    buildVersion: "0.0.0",
    environment: "Stage",
]

// Configuration :: Prod
def configProd = [
    stackname: "ipk",
    dockerFile: "./ci/CCMDiscoveryApi/Dockerfile",
    dockerComposeFile: "./ci/CCMDiscoveryApi/production/docker-compose.yml",
    dockerHost: "stoipk01",
    dockerHostCredentialsId: "ipkServerUser",

    buildVersion: "0.0.0",
    environment: "Production",
]

node(application.jenkinsWorkerConstraint) {

    try {

        def config
        def buildArgs = []

        stage("Clone repository") {
            checkout scm
        }

        // #######################################
        // Make custom build steps below this line
        // =======================================

        stage("Setting up environment") {
            if (env.TAG_NAME) {
                config = configProd
                config.buildVersion = "tag-${env.TAG_NAME.replaceAll('/', '-')}"
            } else {
                config = configStage
                def gitHash = sh(script: "git rev-parse --short HEAD", returnStdout: true).trim()
                config.buildVersion = "commit-${gitHash}"
            }
        }

        stage("Adding build information") {
            // Modify the buildinformation.json file in the repository
            sh "sed -i \"s/APP_VERSION/\"${config.buildVersion}\"/g\" ./CCM.DiscoveryApi/buildinformation.json"
            sh "sed -i \"s/APP_ENVIRONMENT/\"${config.environment}\"/g\" ./CCM.DiscoveryApi/buildinformation.json"
            sh "sed -i \"s/APP_SERVER/\"${config.dockerHost}\"/g\" ./CCM.DiscoveryApi/buildinformation.json"

            sh '''
                BUILDINFORMATION="./CCM.DiscoveryApi/buildinformation.json"
                DATE=$(date '+%Y-%m-%d %H:%M:%S')
                sed -i "s/APP_NAME/SR Discovery/g" $BUILDINFORMATION
                sed -i "s/APP_RELEASE_DATE/${DATE}/g" $BUILDINFORMATION
            '''
            // Print the modified file
            sh 'cat ./CCM.DiscoveryApi/buildinformation.json'
        }

        // #########################################################################
        // Below is generic for applications - don't change anything below this line
        // =========================================================================

        def image
        def imageName

        stage("Setting up tag") {
            if (env.TAG_NAME) {
                application.tag = "tag-${env.TAG_NAME.replaceAll('/', '-')}"
            } else {
                def gitCommitHash = sh(script: "git rev-parse --short HEAD", returnStdout: true).trim()
                application.tag = "commit-${gitCommitHash}"
            }

            // APP_BUILD_TAG is application version identification
            buildArgs.add("APP_BUILD_TAG=${application.tag}")
        }

        docker.withRegistry(env.DOCKER_REGISTRY) {
            stage("Build image") {
                def argsString = ""
                if (env.HTTP_PROXY) {
                    def proxyArgs = ["HTTP_PROXY=${env.HTTP_PROXY}", "HTTPS_PROXY=${env.HTTP_PROXY}", "http_proxy=${env.HTTP_PROXY}", "https_proxy=${env.HTTP_PROXY}"]
                    proxyArgs.each {
                        argsString += "--build-arg ${it} "
                    }
                }

                // Adding custom buildArgs if they exist
                buildArgs.each {
                    argsString += "--build-arg ${it} "
                }

                argsString += "-f ${config.dockerFile} ."
                image = docker.build("${application.name}:${application.tag}", argsString)
            }

            stage("Push image to registry") {
                image.push()
                imageName = image.imageName()
            }
        }

        withCredentials([usernamePassword(credentialsId: config.dockerHostCredentialsId, passwordVariable: "pass", usernameVariable: "user")]) {
            def dockerHost = [
                allowAnyHosts: true,
                user: user,
                password: pass,
                host: config.dockerHost,
                name: config.dockerHost,
            ]
            def dockerComposePath = "${application.tempFilesPath}/${env.BUILD_TAG}".replaceAll("\\s","-")

            stage("Update service on ${dockerHost.host}") {
                sshCommand remote: dockerHost, command: "if [ ! -d ${dockerComposePath} ];then mkdir -p ${dockerComposePath};fi"
                sshPut remote: dockerHost, from: config.dockerComposeFile, into: "${dockerComposePath}/docker-compose.yml"
                sshCommand remote: dockerHost, command: "IMAGE_NAME=${imageName} docker stack deploy -c ${dockerComposePath}/docker-compose.yml ${config.stackname}"
                sshCommand remote: dockerHost, command: "if [ -d ${dockerComposePath} ];then rm -rf ${dockerComposePath};fi"
            }
        }

    } finally {
        cleanWs()
    }
}
